title wooden raw liquid
author Steve Tonneau
homepage www.stevetonneau.fr

color_palette gameboycolour

(a port of a flash game of mine, the original of which can be played here:
http://ded.increpare.com/~locus/kettle
)


========
OBJECTS
========

Background
darkgray

(crappy state definition for players taking turns)
BackgroundSpy (B)
red

BackgroundSoldier (D)
green

BackgroundSoldier2 (F)
yellow

BackgroundSoldier3 (H)
blue
(end crappy state definition for players taking turns)

(player 2 controls 3 soldiers in turn)
soldier
green
.000.
.000.
00000
.000.
.0.0.

soldier2
yellow
.000.
.000.
00000
.000.
.0.0.

soldier3
blue
.000.
.000.
00000
.000.
.0.0.
(end player 2)

(player 1 controls 1 spy with visible and invisible states)
spyvisible
red
.000.
.000.
00000
.000.
.0.0.


spyalmostvisible
blue
.000.
.000.
00000
.000.
.0.0.

spy
pink
.....
.....
.....
.....
.....
(end player 1)


(turn marker)
turnSoldier1
green
.000.
.000.
00000
.000.
.0.0.

turnsoldier2
yellow
.000.
.000.
00000
.000.
.0.0.

turnsoldier3
blue
.000.
.000.
00000
.000.
.0.0.

turnspy
red
.000.
.000.
00000
.000.
.0.0.
(end turn marker)

(player 1 can create doppelganger)
doppelganger
pink
.....
..0..
.....
.....
.....

doppelgangervisible
red
.000.
.000.
00000
.000.
.0.0.


(Crates can be pushed by anybody)
Crate
blue
..0..
00000
..0..
.000.
.0.0.

(I need 6 sprites to randomly chose one of three objectives)
obj1
red
..0..
00000
..0..
.000.
.0.0.


obj2
yellow
..0..
00000
..0..
.000.
.0.0.


obj3
pink
..0..
00000
..0..
.000.
.0.0.


(true objectives)
wobj1
red
.....
.....
..0..
.000.
.0.0.


wobj2
yellow
.....
.....
..0..
.000.
.0.0.


wobj3
pink
.....
.....
..0..
.000.
.0.0.

(temporary marker used for object selection)
objmarker
darkgray

statemarker
darkgray

wall
black

(marker for objective selected)
x
black

(wincond to overcome no bug with background)
wincond
black


=======
LEGEND
=======
; = background
. = BackgroundSpy
back =  BackgroundSoldier or BackgroundSoldier2 or BackgroundSoldier3 or BackgroundSpy
obj = obj1 or obj2 or obj3
turn = turnspy or turnSoldier1 or turnSoldier2 or turnSoldier3
wobj = wobj1 or wobj2 or wobj3
player = soldier or soldier2 or soldier3 or spy or spyvisible or spyalmostvisible
agent = spy or spyvisible or spyalmostvisible
dop = doppelganger or  doppelgangervisible
sold = soldier or soldier2 or soldier3
Obstacle = player
s = soldier
d = soldier2
f = soldier3
h = spyvisible
i = obj1
o = obj2
p = obj3
c = Crate
# = wall
t = turnspy

=========
SOUNDS
=========
Sfx0 42778708 (police car)
Sfx1 81300709 (birdsound for bird target)
Sfx2 87489308 (Horse !!!)


================
COLLISIONLAYERS
================
background
statemarker
back
objmarker, x, wincond
obj, wobj, 
dop, player, Crate, wall, turn

======
RULES
======

[wincond] -> win

(first choose one random objective to make it target)
(set other objectives as fake objectives)
(remove marker from objective and make it real)
random[obj no x] -> [obj objmarker]
[obj1 no objmarker] -> [obj1 x]
[obj2 no objmarker] -> [obj2 x]
[obj3 no objmarker] -> [obj3 x]
[obj1 objmarker] -> [wobj1] Sfx0
[obj2 objmarker] -> [wobj2] Sfx1
[obj3 objmarker] -> [wobj3] Sfx2


(crappy rules to prevent players from acting when it is not their turn)
[>  agent | BackgroundSoldier] ->  [ agent | BackgroundSoldier ]
[>  agent | BackgroundSoldier2] -> [ agent | BackgroundSoldier2 ]
[>  agent | BackgroundSoldier3] -> [ agent | BackgroundSoldier3 ]

[>  soldier | BackgroundSoldier2] -> [ soldier | BackgroundSoldier2 ]
[>  soldier | BackgroundSoldier3] -> [ soldier | BackgroundSoldier3 ]
[>  soldier | BackgroundSpy] -> [ soldier | BackgroundSpy ]


[>  soldier2 | BackgroundSoldier] -> [ soldier2 | BackgroundSoldier ]
[>  soldier2 | BackgroundSoldier3] -> [ soldier2 | BackgroundSoldier3 ]
[>  soldier2 | BackgroundSpy] -> [ soldier2 | BackgroundSpy ]

[>  soldier3 | BackgroundSoldier2] -> [ soldier3 | BackgroundSoldier2 ]
[>  soldier3 | BackgroundSoldier] -> [ soldier3 | BackgroundSoldier ]
[>  soldier3 | BackgroundSpy] -> [ soldier3 | BackgroundSpy ]
(end of crappy rules to prevent players from acting when it is not their turn)

(actual game rules !)
(push crates)
[>  Player | Crate] -> [ >  Player | > Crate ]
[>  crate | Crate] -> [ >  crate | > Crate] 

(soldier can not go on objective)
[>  sold | obj] -> [  sold |  obj ]
[>  sold | wobj] -> [  sold |  wobj ]

(soldier kills doppelganger by walking on it)
[>  sold | dop] ->  [>   sold |  ]

(win if objective reach / spy is dead)
[>  sold | agent] -> [  sold |  wincond ] message "player 2 wins!"
[> agent | wobj] -> [> agent | wincond]  message "player 1 wins!"

(Action for creating doppelganger)
[Action agent  BackgroundSpy] -> [agent objmarker BackgroundSpy]
[no Player objmarker] -> [doppelganger]

(Spy detection)
late[spyalmostvisible] -> [spy] 
late[spyvisible] -> [spyalmostvisible] 
late[doppelgangervisible] -> [doppelganger]
late[sold | ... | spy] -> [sold | ... | spyvisible] 
late[sold | ... | spyalmostvisible] -> [sold | ... | spyvisible]
late[sold | ... | doppelganger] -> [sold | ... | doppelgangervisible] 

(Player turn handling)
	(turn marker)
late[turn] -> [turn statemarker]
late[turnspy statemarker] -> [turnSoldier1]
late[turnSoldier1 statemarker] -> [turnSoldier2]
late[turnSoldier2 statemarker] -> [turnSoldier3]
late[turnSoldier3 statemarker] -> [turnspy]
late[statemarker] -> []
	(end turn marker)

	(marking states to only perform player turn switching once)
late[back] -> [back statemarker]
late[BackgroundSpy statemarker] -> [BackgroundSoldier]
late[BackgroundSoldier statemarker] -> [BackgroundSoldier2]
late[BackgroundSoldier2 statemarker] -> [BackgroundSoldier3]
late[BackgroundSoldier3 statemarker] -> [BackgroundSpy]
late[statemarker] -> []
(end Player turn  handling)
==============
WINCONDITIONS
==============

=======
LEVELS
=======

################t
#.i...........#
#.......d.....#
#....c.......#
#..f....s..#
#.......c...#
#....#....h..#
#.p..........#
#...c.........#
#.......o.....#
#.............#
#.............#
###############

